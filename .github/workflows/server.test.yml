name: CI TESTS

on:
  pull_request:
    branches:
      - dev
      - main
    types: 
      - open
      - closed
      - review_requested
jobs:
  analyse:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js and cache global npm dependencies
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: cache node modules
      id: node-modules-cache
      uses: actions/cache@v2
      with:
        path: |
          node_modules
        key: ${{ hashFiles('package-lock.json') }}
    
    - name: download node_modules
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: npm ci

    - name: analyse code
      run: npx eslint .

  test:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4
    - name: Run after merge
      if: github.event.action == 'closed'
      env:
        not_merged: ${{ github.event.pull_request.merged == false }}
      run: |
        if $not_merged; then
          echo "This pull request was closed but it wasn't merged. The tests shouldn't run"
          exit 1;
        fi;

    - name: Use Node.js and cache global npm dependencies
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: cache node modules
      id: node-modules-cache
      uses: actions/cache@v2
      with:
        path: |
          server/node_modules
        key: ${{ hashFiles('server/package-lock.json') }}

    - name: download node_modules
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: cd server && npm ci

    - name: test the server
      env:
        test_db_user: ${{ secrets.test_db_user }}
        test_db_password: ${{ secrets.test_db_password }}
        test_db_host: ${{ secrets.test_db_host }}
        test_db_port: ${{ secrets.test_db_port }}
        test_db_database: ${{ secrets.test_db_database }}
        test_db_certificate: ${{ secrets.test_db_certificate }}
        SECRET: ${{ secrets.SECRET }}
        EMAIL_CLIENT_SECRET: ${{ secrets.EMAIL_CLIENT_SECRET }}
        EMAIL_CLIENT_ID: ${{ secrets.EMAIL_CLIENT_ID }}
        EMAIL_REFRESH_TOKEN: ${{ secrets.EMAIL_REFRESH_TOKEN }}
        EMAIL_CLIENT_EMAIL: ${{ secrets.EMAIL_CLIENT_EMAIL }}
      run: cd server && npm test
